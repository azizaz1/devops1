pipeline {
    agent any

    stages {
        stage('Checkout') {
            steps {
                // Checkout source code from your repository
                // Use the appropriate SCM configuration for your repository
                // For example, for Git:
                git branch: 'testProduit', credentialsId: 'your-credentials', url: 'https://github.com/azizaz1/devops1.git'
            }
        }

        stage('Build') {
            steps {
                // Build your project
                sh 'mvn clean package'
            }
        }

        stage('Test') {
            steps {
                // Run your tests
                sh 'mvn test'
            }
        }

        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv(installationName: 'sq1'){
                    // Run SonarQube analysis using the SonarQube Scanner
                    sh 'mvn sonar:sonar'
                }
            }
        }
stage("Publish to Nexus Repository Manager") {
            steps {
                script {
                    pom = readMavenPom file: "pom.xml";
                    filesByGlob = findFiles(glob: "target/*.${pom.packaging}");
                    echo "${filesByGlob[0].name} ${filesByGlob[0].path} ${filesByGlob[0].directory} ${filesByGlob[0].length} ${filesByGlob[0].lastModified}"
                    artifactPath = filesByGlob[0].path;
                    artifactExists = fileExists artifactPath;
                    if(artifactExists) {
                        echo "*** File: ${artifactPath}, group: ${pom.groupId}, packaging: ${pom.packaging}, version ${pom.version}";
                        nexusArtifactUploader(
                            nexusVersion: 'nexus4',
                            protocol: 'https',
                            nexusUrl: '192.168.33.10:8081',
                            groupId: 'pom.org.springframework.boot',
                            version: 'pom.2.5.3',
                            repository: 'maven-central-repository',
                            credentialsId: NEXUS_CRED,
                            artifacts: [
                                [artifactId: pom.spring-boot-starter-parent,
                                classifier: '',
                                file: artifactPath,
                                type: pom.packaging],
                                [artifactId: pom.spring-boot-starter-parent,
                                classifier: '',
                                file: "pom.xml",
                                type: "pom"]
                            ]
                        );
                    } else {
                        error "*** File: ${artifactPath}, could not be found";
                    }
                }
            }
        }
    }
}
